{"version":3,"file":"bundle.js","sources":["../../node_modules/date-fns/locale/en-US/_lib/formatDistance.js","../../node_modules/date-fns/locale/_lib/buildFormatLongFn.js","../../node_modules/date-fns/locale/en-US/_lib/formatLong.js","../../node_modules/date-fns/locale/en-US/_lib/formatRelative.js","../../node_modules/date-fns/locale/_lib/buildLocalizeFn.js","../../node_modules/date-fns/locale/en-US/_lib/localize.js","../../node_modules/date-fns/locale/_lib/buildMatchFn.js","../../node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","../../node_modules/date-fns/locale/en-US/_lib/match.js","../../node_modules/date-fns/locale/en-US.js","../../node_modules/date-fns/_lib/defaultLocale.js","../../node_modules/date-fns/_lib/defaultOptions.js","../../node_modules/date-fns/constants.js","../../node_modules/date-fns/toDate.js","../../node_modules/date-fns/startOfDay.js","../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","../../node_modules/date-fns/differenceInCalendarDays.js","../../node_modules/date-fns/constructFrom.js","../../node_modules/date-fns/startOfYear.js","../../node_modules/date-fns/getDayOfYear.js","../../node_modules/date-fns/startOfWeek.js","../../node_modules/date-fns/startOfISOWeek.js","../../node_modules/date-fns/getISOWeekYear.js","../../node_modules/date-fns/startOfISOWeekYear.js","../../node_modules/date-fns/getISOWeek.js","../../node_modules/date-fns/getWeekYear.js","../../node_modules/date-fns/startOfWeekYear.js","../../node_modules/date-fns/getWeek.js","../../node_modules/date-fns/_lib/addLeadingZeros.js","../../node_modules/date-fns/_lib/format/lightFormatters.js","../../node_modules/date-fns/_lib/format/formatters.js","../../node_modules/date-fns/_lib/format/longFormatters.js","../../node_modules/date-fns/_lib/protectedTokens.js","../../node_modules/date-fns/isDate.js","../../node_modules/date-fns/isValid.js","../../node_modules/date-fns/format.js","../index.ts"],"sourcesContent":["\"use strict\";\nexports.formatDistance = void 0;\n\nconst formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nconst formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\nexports.formatDistance = formatDistance;\n","\"use strict\";\nexports.buildFormatLongFn = buildFormatLongFn;\n\nfunction buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","\"use strict\";\nexports.formatLong = void 0;\nvar _index = require(\"../../_lib/buildFormatLongFn.js\");\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nconst formatLong = (exports.formatLong = {\n  date: (0, _index.buildFormatLongFn)({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: (0, _index.buildFormatLongFn)({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: (0, _index.buildFormatLongFn)({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n});\n","\"use strict\";\nexports.formatRelative = void 0;\n\nconst formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nconst formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\nexports.formatRelative = formatRelative;\n","\"use strict\";\nexports.buildLocalizeFn = buildLocalizeFn; /* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nfunction buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","\"use strict\";\nexports.localize = void 0;\nvar _index = require(\"../../_lib/buildLocalizeFn.js\");\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nconst localize = (exports.localize = {\n  ordinalNumber,\n\n  era: (0, _index.buildLocalizeFn)({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: (0, _index.buildLocalizeFn)({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: (0, _index.buildLocalizeFn)({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: (0, _index.buildLocalizeFn)({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: (0, _index.buildLocalizeFn)({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n});\n","\"use strict\";\nexports.buildMatchFn = buildMatchFn;\n\nfunction buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","\"use strict\";\nexports.buildMatchPatternFn = buildMatchPatternFn;\n\nfunction buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","\"use strict\";\nexports.match = void 0;\n\nvar _index = require(\"../../_lib/buildMatchFn.js\");\nvar _index2 = require(\"../../_lib/buildMatchPatternFn.js\");\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nconst match = (exports.match = {\n  ordinalNumber: (0, _index2.buildMatchPatternFn)({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: (0, _index.buildMatchFn)({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: (0, _index.buildMatchFn)({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: (0, _index.buildMatchFn)({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: (0, _index.buildMatchFn)({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: (0, _index.buildMatchFn)({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n});\n","\"use strict\";\nexports.enUS = void 0;\nvar _index = require(\"./en-US/_lib/formatDistance.js\");\nvar _index2 = require(\"./en-US/_lib/formatLong.js\");\nvar _index3 = require(\"./en-US/_lib/formatRelative.js\");\nvar _index4 = require(\"./en-US/_lib/localize.js\");\nvar _index5 = require(\"./en-US/_lib/match.js\");\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nconst enUS = (exports.enUS = {\n  code: \"en-US\",\n  formatDistance: _index.formatDistance,\n  formatLong: _index2.formatLong,\n  formatRelative: _index3.formatRelative,\n  localize: _index4.localize,\n  match: _index5.match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n});\n","\"use strict\";\nObject.defineProperty(exports, \"defaultLocale\", {\n  enumerable: true,\n  get: function () {\n    return _index.enUS;\n  },\n});\nvar _index = require(\"../locale/en-US.js\");\n","\"use strict\";\nexports.getDefaultOptions = getDefaultOptions;\nexports.setDefaultOptions = setDefaultOptions;\n\nlet defaultOptions = {};\n\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\n\nfunction setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","\"use strict\";\nexports.secondsInYear =\n  exports.secondsInWeek =\n  exports.secondsInQuarter =\n  exports.secondsInMonth =\n  exports.secondsInMinute =\n  exports.secondsInHour =\n  exports.secondsInDay =\n  exports.quartersInYear =\n  exports.monthsInYear =\n  exports.monthsInQuarter =\n  exports.minutesInYear =\n  exports.minutesInMonth =\n  exports.minutesInHour =\n  exports.minutesInDay =\n  exports.minTime =\n  exports.millisecondsInWeek =\n  exports.millisecondsInSecond =\n  exports.millisecondsInMinute =\n  exports.millisecondsInHour =\n  exports.millisecondsInDay =\n  exports.maxTime =\n  exports.daysInYear =\n  exports.daysInWeek =\n    void 0; /**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nconst daysInWeek = (exports.daysInWeek = 7);\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nconst daysInYear = (exports.daysInYear = 365.2425);\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nconst maxTime = (exports.maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000);\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nconst minTime = (exports.minTime = -maxTime);\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nconst millisecondsInWeek = (exports.millisecondsInWeek = 604800000);\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nconst millisecondsInDay = (exports.millisecondsInDay = 86400000);\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nconst millisecondsInMinute = (exports.millisecondsInMinute = 60000);\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nconst millisecondsInHour = (exports.millisecondsInHour = 3600000);\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nconst millisecondsInSecond = (exports.millisecondsInSecond = 1000);\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nconst minutesInYear = (exports.minutesInYear = 525600);\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nconst minutesInMonth = (exports.minutesInMonth = 43200);\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nconst minutesInDay = (exports.minutesInDay = 1440);\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nconst minutesInHour = (exports.minutesInHour = 60);\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nconst monthsInQuarter = (exports.monthsInQuarter = 3);\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nconst monthsInYear = (exports.monthsInYear = 12);\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nconst quartersInYear = (exports.quartersInYear = 4);\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nconst secondsInHour = (exports.secondsInHour = 3600);\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nconst secondsInMinute = (exports.secondsInMinute = 60);\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nconst secondsInDay = (exports.secondsInDay = secondsInHour * 24);\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nconst secondsInWeek = (exports.secondsInWeek = secondsInDay * 7);\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nconst secondsInYear = (exports.secondsInYear = secondsInDay * daysInYear);\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nconst secondsInMonth = (exports.secondsInMonth = secondsInYear / 12);\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nconst secondsInQuarter = (exports.secondsInQuarter = secondsInMonth * 3);\n","\"use strict\";\nexports.toDate = toDate;\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n","\"use strict\";\nexports.startOfDay = startOfDay;\nvar _index = require(\"./toDate.js\");\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nfunction startOfDay(date) {\n  const _date = (0, _index.toDate)(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n","\"use strict\";\nexports.getTimezoneOffsetInMilliseconds = getTimezoneOffsetInMilliseconds;\nvar _index = require(\"../toDate.js\");\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  const _date = (0, _index.toDate)(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","\"use strict\";\nexports.differenceInCalendarDays = differenceInCalendarDays;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfDay.js\");\nvar _index3 = require(\"./_lib/getTimezoneOffsetInMilliseconds.js\");\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nfunction differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = (0, _index2.startOfDay)(dateLeft);\n  const startOfDayRight = (0, _index2.startOfDay)(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight -\n    (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(\n    (timestampLeft - timestampRight) / _index.millisecondsInDay,\n  );\n}\n","\"use strict\";\nexports.constructFrom = constructFrom;\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nfunction constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n","\"use strict\";\nexports.startOfYear = startOfYear;\nvar _index = require(\"./toDate.js\");\nvar _index2 = require(\"./constructFrom.js\");\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nfunction startOfYear(date) {\n  const cleanDate = (0, _index.toDate)(date);\n  const _date = (0, _index2.constructFrom)(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n","\"use strict\";\nexports.getDayOfYear = getDayOfYear;\nvar _index = require(\"./differenceInCalendarDays.js\");\nvar _index2 = require(\"./startOfYear.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nfunction getDayOfYear(date) {\n  const _date = (0, _index3.toDate)(date);\n  const diff = (0, _index.differenceInCalendarDays)(\n    _date,\n    (0, _index2.startOfYear)(_date),\n  );\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n","\"use strict\";\nexports.startOfWeek = startOfWeek;\nvar _index = require(\"./toDate.js\");\n\nvar _index2 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfWeek(date, options) {\n  const defaultOptions = (0, _index2.getDefaultOptions)();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = (0, _index.toDate)(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n","\"use strict\";\nexports.startOfISOWeek = startOfISOWeek;\nvar _index = require(\"./startOfWeek.js\");\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nfunction startOfISOWeek(date) {\n  return (0, _index.startOfWeek)(date, { weekStartsOn: 1 });\n}\n","\"use strict\";\nexports.getISOWeekYear = getISOWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./toDate.js\");\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nfunction getISOWeekYear(date) {\n  const _date = (0, _index3.toDate)(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = (0, _index2.startOfISOWeek)(\n    fourthOfJanuaryOfNextYear,\n  );\n\n  const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = (0, _index2.startOfISOWeek)(\n    fourthOfJanuaryOfThisYear,\n  );\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n","\"use strict\";\nexports.startOfISOWeekYear = startOfISOWeekYear;\nvar _index = require(\"./getISOWeekYear.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./constructFrom.js\");\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfISOWeekYear(date) {\n  const year = (0, _index.getISOWeekYear)(date);\n  const fourthOfJanuary = (0, _index3.constructFrom)(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return (0, _index2.startOfISOWeek)(fourthOfJanuary);\n}\n","\"use strict\";\nexports.getISOWeek = getISOWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfISOWeek.js\");\nvar _index3 = require(\"./startOfISOWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nfunction getISOWeek(date) {\n  const _date = (0, _index4.toDate)(date);\n  const diff =\n    +(0, _index2.startOfISOWeek)(_date) -\n    +(0, _index3.startOfISOWeekYear)(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}\n","\"use strict\";\nexports.getWeekYear = getWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./toDate.js\");\n\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nfunction getWeekYear(date, options) {\n  const _date = (0, _index3.toDate)(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = (0, _index.constructFrom)(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = (0, _index2.startOfWeek)(\n    firstWeekOfNextYear,\n    options,\n  );\n\n  const firstWeekOfThisYear = (0, _index.constructFrom)(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = (0, _index2.startOfWeek)(\n    firstWeekOfThisYear,\n    options,\n  );\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n","\"use strict\";\nexports.startOfWeekYear = startOfWeekYear;\nvar _index = require(\"./constructFrom.js\");\nvar _index2 = require(\"./getWeekYear.js\");\nvar _index3 = require(\"./startOfWeek.js\");\n\nvar _index4 = require(\"./_lib/defaultOptions.js\");\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nfunction startOfWeekYear(date, options) {\n  const defaultOptions = (0, _index4.getDefaultOptions)();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = (0, _index2.getWeekYear)(date, options);\n  const firstWeek = (0, _index.constructFrom)(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = (0, _index3.startOfWeek)(firstWeek, options);\n  return _date;\n}\n","\"use strict\";\nexports.getWeek = getWeek;\nvar _index = require(\"./constants.js\");\nvar _index2 = require(\"./startOfWeek.js\");\nvar _index3 = require(\"./startOfWeekYear.js\");\nvar _index4 = require(\"./toDate.js\");\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nfunction getWeek(date, options) {\n  const _date = (0, _index4.toDate)(date);\n  const diff =\n    +(0, _index2.startOfWeek)(_date, options) -\n    +(0, _index3.startOfWeekYear)(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / _index.millisecondsInWeek) + 1;\n}\n","\"use strict\";\nexports.addLeadingZeros = addLeadingZeros;\nfunction addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","\"use strict\";\nexports.lightFormatters = void 0;\nvar _index = require(\"../addLeadingZeros.js\");\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nconst lightFormatters = (exports.lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return (0, _index.addLeadingZeros)(\n      token === \"yy\" ? year % 100 : year,\n      token.length,\n    );\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\"\n      ? String(month + 1)\n      : (0, _index.addLeadingZeros)(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return (0, _index.addLeadingZeros)(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return (0, _index.addLeadingZeros)(\n      date.getHours() % 12 || 12,\n      token.length,\n    );\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return (0, _index.addLeadingZeros)(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return (0, _index.addLeadingZeros)(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return (0, _index.addLeadingZeros)(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return (0, _index.addLeadingZeros)(fractionalSeconds, token.length);\n  },\n});\n","\"use strict\";\nexports.formatters = void 0;\nvar _index = require(\"../../getDayOfYear.js\");\nvar _index2 = require(\"../../getISOWeek.js\");\nvar _index3 = require(\"../../getISOWeekYear.js\");\nvar _index4 = require(\"../../getWeek.js\");\nvar _index5 = require(\"../../getWeekYear.js\");\n\nvar _index6 = require(\"../addLeadingZeros.js\");\nvar _index7 = require(\"./lightFormatters.js\");\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nconst formatters = (exports.formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return _index7.lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = (0, _index5.getWeekYear)(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return (0, _index6.addLeadingZeros)(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return (0, _index6.addLeadingZeros)(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = (0, _index3.getISOWeekYear)(date);\n\n    // Padding\n    return (0, _index6.addLeadingZeros)(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return (0, _index6.addLeadingZeros)(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return (0, _index6.addLeadingZeros)(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return (0, _index6.addLeadingZeros)(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return _index7.lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return (0, _index6.addLeadingZeros)(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = (0, _index4.getWeek)(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return (0, _index6.addLeadingZeros)(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = (0, _index2.getISOWeek)(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return (0, _index6.addLeadingZeros)(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return _index7.lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = (0, _index.getDayOfYear)(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return (0, _index6.addLeadingZeros)(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return (0, _index6.addLeadingZeros)(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return (0, _index6.addLeadingZeros)(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return (0, _index6.addLeadingZeros)(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return _index7.lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return _index7.lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return (0, _index6.addLeadingZeros)(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return (0, _index6.addLeadingZeros)(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return _index7.lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return _index7.lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return _index7.lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return (0, _index6.addLeadingZeros)(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return (0, _index6.addLeadingZeros)(timestamp, token.length);\n  },\n});\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return (\n    sign + String(hours) + delimiter + (0, _index6.addLeadingZeros)(minutes, 2)\n  );\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + (0, _index6.addLeadingZeros)(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = (0, _index6.addLeadingZeros)(Math.trunc(absOffset / 60), 2);\n  const minutes = (0, _index6.addLeadingZeros)(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","\"use strict\";\nexports.longFormatters = void 0;\n\nconst dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nconst longFormatters = (exports.longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n});\n","\"use strict\";\nexports.isProtectedDayOfYearToken = isProtectedDayOfYearToken;\nexports.isProtectedWeekYearToken = isProtectedWeekYearToken;\nexports.warnOrThrowProtectedError = warnOrThrowProtectedError;\nconst dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nfunction isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nfunction isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nfunction warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","\"use strict\";\nexports.isDate = isDate; /**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nfunction isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n","\"use strict\";\nexports.isValid = isValid;\nvar _index = require(\"./isDate.js\");\nvar _index2 = require(\"./toDate.js\");\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid(date) {\n  if (!(0, _index.isDate)(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = (0, _index2.toDate)(date);\n  return !isNaN(Number(_date));\n}\n","\"use strict\";\nexports.format = exports.formatDate = format;\nObject.defineProperty(exports, \"formatters\", {\n  enumerable: true,\n  get: function () {\n    return _index3.formatters;\n  },\n});\nObject.defineProperty(exports, \"longFormatters\", {\n  enumerable: true,\n  get: function () {\n    return _index4.longFormatters;\n  },\n});\nvar _index = require(\"./_lib/defaultLocale.js\");\nvar _index2 = require(\"./_lib/defaultOptions.js\");\nvar _index3 = require(\"./_lib/format/formatters.js\");\nvar _index4 = require(\"./_lib/format/longFormatters.js\");\nvar _index5 = require(\"./_lib/protectedTokens.js\");\n\nvar _index6 = require(\"./isValid.js\");\nvar _index7 = require(\"./toDate.js\");\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nfunction format(date, formatStr, options) {\n  const defaultOptions = (0, _index2.getDefaultOptions)();\n  const locale =\n    options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = (0, _index7.toDate)(date);\n\n  if (!(0, _index6.isValid)(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = _index4.longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (_index3.formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          (0, _index5.isProtectedWeekYearToken)(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          (0, _index5.isProtectedDayOfYearToken)(token))\n      ) {\n        (0, _index5.warnOrThrowProtectedError)(token, formatStr, String(date));\n      }\n\n      const formatter = _index3.formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n","import { format } from \"../node_modules/date-fns/format\";\r\n\r\ninterface Comic {\r\n    id: number;\r\n    day: number;\r\n    month: number;\r\n    year: number;\r\n    img: string;\r\n    alt: string;\r\n    title: string;\r\n    safe_title: string;\r\n}\r\n\r\n// const options = {\r\n//     year: 'number',\r\n//     month: 'long',\r\n//     day: 'number',\r\n// }\r\n\r\nasync function fetchInitialData() {\r\n    const params = new URLSearchParams({\r\n        'email': 'k.greshnov@innopolis.university',\r\n    });\r\n    return await fetch('https://fwd.innopolis.university/api/hw2?' + params.toString()).then(r => { return r.json() });\r\n}\r\n\r\nasync function fetchComicData(receivedId : number): Promise<Comic> {\r\n    const params = new URLSearchParams({\r\n        'id': receivedId.toString(),\r\n    });\r\n    return await fetch('https://fwd.innopolis.university/api/comic?' + params.toString()).then(r => { return r.json() });\r\n}\r\n\r\nasync function display() {\r\n    const fetchResult : Comic = await fetchComicData(await fetchInitialData());\r\n\r\n    const section = document.getElementById('fetch-comic');\r\n    const divEl = document.createElement('div');\r\n    const imgEl = document.createElement('img');\r\n    imgEl.id = 'fetch-image'\r\n\r\n    const titleEl = document.createElement('p');\r\n    titleEl.id = 'fetch-title';\r\n    const titleText = document.createTextNode(fetchResult.safe_title);\r\n    titleEl.appendChild(titleText);\r\n\r\n    imgEl.src = fetchResult.img;\r\n    imgEl.alt = fetchResult.alt;\r\n\r\n    const dateEl = document.createElement('p');\r\n    dateEl.id = 'fetch-date';\r\n    const dateTemp = format(new Date(fetchResult.year, fetchResult.month, fetchResult.day), \"MMM d, y\");\r\n    const dateText = document.createTextNode(dateTemp);\r\n    dateEl.appendChild(dateText);\r\n\r\n    divEl.appendChild(titleEl);\r\n    divEl.appendChild(imgEl);\r\n    divEl.appendChild(dateEl);\r\n\r\n    if (section != null) {\r\n        section.appendChild(divEl);\r\n    }\r\n}\r\n\r\ndisplay();"],"names":["formatDistance_1","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","token","count","options","result","tokenValue","replace","toString","addSuffix","comparison","buildFormatLongFn_1","buildFormatLongFn","args","width","String","defaultWidth","formats","formatLong_1","formatLong","_index","require$$0","date","full","long","medium","short","time","dateTime","formatRelative_1","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_date","_baseDate","_options","buildLocalizeFn_1","buildLocalizeFn","value","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","localize_1","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn_1","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","length","findIndex","pattern","test","object","Object","prototype","hasOwnProperty","call","findKey","valueCallback","rest","slice","buildMatchPatternFn_1","buildMatchPatternFn","parseResult","parsePattern","match_1","_index2","require$$1","parseInt","any","index","enUS_1","enUS","_index3","require$$2","_index4","require$$3","_index5","require$$4","code","weekStartsOn","firstWeekContainsDate","defineProperty","exports","enumerable","get","defaultOptions_1","defaultOptions","newOptions","constants","secondsInYear","secondsInWeek","secondsInQuarter","secondsInMonth","secondsInMinute","secondsInHour","secondsInDay","quartersInYear","monthsInYear","monthsInQuarter","minutesInYear","minutesInMonth","minutesInHour","minutesInDay","minTime","millisecondsInWeek","millisecondsInSecond","millisecondsInMinute","millisecondsInHour","millisecondsInDay","maxTime","daysInYear","daysInWeek","Math","pow","toDate_1","toDate","argument","argStr","Date","constructor","NaN","startOfDay_1","startOfDay","setHours","getTimezoneOffsetInMilliseconds_1","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","differenceInCalendarDays_1","differenceInCalendarDays","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","round","constructFrom_1","constructFrom","startOfYear_1","startOfYear","cleanDate","setFullYear","getDayOfYear_1","getDayOfYear","diff","startOfWeek_1","getDefaultOptions","locale","getDay","setDate","startOfISOWeek_1","startOfISOWeek","startOfWeek","getISOWeekYear_1","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","startOfISOWeekYear_1","startOfISOWeekYear","getISOWeekYear","fourthOfJanuary","getISOWeek_1","getISOWeek","getWeekYear_1","firstWeekOfNextYear","firstWeekOfThisYear","startOfWeekYear_1","startOfWeekYear","getWeekYear","firstWeek","getWeek_1","getWeek","addLeadingZeros_1","addLeadingZeros","targetLength","sign","output","abs","padStart","lightFormatters_1","lightFormatters","y","signedYear","M","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","fractionalSeconds","trunc","formatters_1","formatters","_index6","require$$5","_index7","require$$6","dayPeriodEnum","formatTimezoneShort","offset","delimiter","absOffset","hours","minutes","formatTimezoneWithOptionalMinutes","formatTimezone","G","unit","Y","signedWeekYear","weekYear","twoDigitYear","R","isoWeekYear","u","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","x","O","z","t","timestamp","T","longFormatters_1","dateLongFormatter","timeLongFormatter","longFormatters","p","P","datePattern","timePattern","dateTimeFormat","protectedTokens","dayOfYearTokenRE","weekYearTokenRE","format","input","_message","subject","message","console","warn","throwTokens","includes","RangeError","isDate_1","isDate","isValid_1","isValid","isNaN","formatDate","formatStr","defaultLocale","originalDate","parts","longFormattingTokensRegExp","map","substring","firstCharacter","longFormatter","join","formattingTokensRegExp","isToken","cleanEscapedString","unescapedLatinCharacterRegExp","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","warnOrThrowProtectedError","formatter","escapedStringRegExp","doubleQuoteRegExp","matched","async","fetchResult","receivedId","params","URLSearchParams","id","fetch","then","r","json","fetchComicData","email","fetchInitialData","section","document","getElementById","divEl","createElement","imgEl","titleEl","titleText","createTextNode","safe_title","appendChild","src","img","alt","dateEl","dateTemp","dateText","display"],"mappings":"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"}